syntax = "proto3";
package telepresence.daemon;

import "google/protobuf/empty.proto";
import "rpc/common/version.proto";
import "rpc/manager/manager.proto";

option go_package = "github.com/telepresenceio/telepresence/rpc/v2/daemon";

// The Daemon service is responsible for managing network overrides and also
// acts as the central point for logging.
service Daemon {
  // Version returns version information from the Daemon
  rpc Version(google.protobuf.Empty) returns (telepresence.common.VersionInfo);

  // Status returns the current connectivity status
  rpc Status(google.protobuf.Empty) returns (DaemonStatus);

  // Quit quits (terminates) the service.
  rpc Quit(google.protobuf.Empty) returns (google.protobuf.Empty);

  // SetOutboundInfo provides the information needed to set up outbound connectivity
  rpc SetOutboundInfo(OutboundInfo) returns (google.protobuf.Empty);

  // SetDnsSearchPath sets a new search path.
  rpc SetDnsSearchPath(Paths) returns (google.protobuf.Empty);
}

message DaemonStatus {
  enum ErrType {
    UNSPECIFIED = 0;
    NOT_STARTED = 1;
    NO_NETWORK = 3;
  }
  ErrType error = 1;
  string dns = 2;
  reserved 3;
}

message Paths {
  repeated string paths = 1;
}

// IPNet is a subnet. I.e. 10.43.0.0/16
message IPNet {
  bytes ip = 1;
  int32 mask = 2;
}

// OutboundInfo contains all information that the root daemon needs in order to
// establish outbound traffic to the cluster.
message OutboundInfo {
  // session makes it possible for the root daemon to identify itself as the
  // same client as the user daemon.
  manager.SessionInfo session = 1;

  // manager_port is the port for the traffic-manager gRPC API.
  int32 manager_port = 2;

  // kube_dns_ip is the IP address of the kube-dns.kube-system service,
  bytes kube_dns_ip = 3;

  // service_subnet is the Kubernetes service subnet
  IPNet service_subnet = 4;

  // pod_subnets are the subnets used for Kubenetes pods.
  repeated IPNet pod_subnets = 5;
}